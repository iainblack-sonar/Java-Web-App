<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.sonarsource.demo</groupId>
  <artifactId>java-security</artifactId>
  <version>1.0</version>
  <packaging>war</packaging>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.organization>iainblack-sonar</sonar.organization>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.projectName>Java Web App</sonar.projectName>
  </properties>

  <dependencies>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.2</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>8.0.33</version>
    </dependency>
    <!-- Missing dependencies for compilation -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.15</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.11.0</version>
    </dependency>
    <!-- Test dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
    </dependency>
    <!-- Integration Test Dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.10.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>5.3.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>11.0.15</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>11.0.15</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- 
    ===============================================================================
    TESTING STRATEGY OVERVIEW
    ===============================================================================
    
    This project demonstrates separate unit and integration test execution with
    individual coverage reporting for SonarQube analysis.
    
    TEST TYPES:
    - Unit Tests (*Test.java): Test individual classes/methods in isolation
    - Integration Tests (*IT.java): Test component interactions and real functionality
    
    MAVEN PHASES EXECUTION ORDER:
    1. test                    -> Run unit tests (*Test.java) via Surefire
    2. integration-test        -> Run integration tests (*IT.java) via Failsafe  
    3. post-integration-test   -> Generate integration test coverage report
    4. verify                  -> Verify integration test results
    
    COVERAGE REPORTS GENERATED (when using -Pcoverage):
    - target/site/jacoco/jacoco.xml       -> Unit test coverage
    - target/site/jacoco-it/jacoco.xml    -> Integration test coverage
    
    TEST EXECUTION REPORTS GENERATED:
    - target/surefire-reports/*.xml       -> Unit test execution results (pass/fail)
    - target/failsafe-reports/*.xml       -> Integration test execution results (pass/fail)
    
    SONARQUBE INTEGRATION:
    Coverage reports: -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml
    Test execution:   -Dsonar.junit.reportPaths=target/surefire-reports,target/failsafe-reports
    
    USAGE EXAMPLES:
    mvn clean test                                           -> Unit tests only
    mvn clean test integration-test -Pcoverage               -> Unit + Integration tests with coverage
    mvn clean test integration-test post-integration-test   -> Full test cycle with reports
    ===============================================================================
    -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <source>17</source>
          <target>17</target>
        </configuration>
      </plugin>
      <!-- UNIT TEST CONFIGURATION -->
      <!-- Surefire plugin runs unit tests (*Test.java) during 'test' phase -->
      <!-- Generates: target/surefire-reports/*.xml (test execution results for SonarQube) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <!-- Exclude integration tests from unit test execution -->
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <!-- Use JaCoCo agent for coverage collection (set by jacoco:prepare-agent) -->
          <argLine>@{argLine} -XX:+EnableDynamicAgentLoading</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.3.2</version>
      </plugin>
      <!-- INTEGRATION TEST CONFIGURATION -->
      <!-- Failsafe plugin runs integration tests (*IT.java) during 'integration-test' phase -->
      <!-- Generates: target/failsafe-reports/*.xml (test execution results for SonarQube) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.1.2</version>
        <executions>
          <execution>
            <goals>
              <!-- Run integration tests during 'integration-test' phase -->
              <goal>integration-test</goal>
              <!-- Verify results during 'verify' phase -->
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Include only integration test files -->
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <!-- Use JaCoCo agent for coverage collection (set by jacoco:prepare-agent-integration) -->
          <argLine>@{argLine} -XX:+EnableDynamicAgentLoading</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>11.0.15</version>
        <configuration>
          <httpConnector>
            <port>8080</port>
          </httpConnector>
          <stopKey>STOP</stopKey>
          <stopPort>9999</stopPort>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- COVERAGE PROFILE: Enables JaCoCo code coverage for both unit and integration tests -->
    <!-- Usage: mvn clean test integration-test post-integration-test -Pcoverage -->
    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <!-- JACOCO COVERAGE CONFIGURATION -->
          <!-- Provides code coverage analysis for both unit and integration tests -->
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.8.11</version>
            <executions>
              
              <!-- STEP 1: Prepare JaCoCo agent for UNIT TESTS -->
              <!-- Runs before unit tests to instrument classes for coverage collection -->
              <!-- Output: target/jacoco.exec (binary coverage data) -->
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
              
              <!-- STEP 2: Prepare JaCoCo agent for INTEGRATION TESTS -->
              <!-- Runs before integration tests to instrument classes for coverage collection -->
              <!-- Output: target/jacoco-it.exec (binary coverage data) -->
              <execution>
                <id>prepare-agent-integration</id>
                <goals>
                  <goal>prepare-agent-integration</goal>
                </goals>
              </execution>
              
              <!-- STEP 3: Generate UNIT TEST coverage report -->
              <!-- Runs after unit tests (test phase) to create XML report -->
              <!-- Input: target/jacoco.exec -->
              <!-- Output: target/site/jacoco/jacoco.xml -->
              <execution>
                <id>report</id>
                <phase>test</phase>
                <goals>
                  <goal>report</goal>
                </goals>
                <configuration>
                  <formats>
                    <format>XML</format>
                  </formats>
                </configuration>
              </execution>
              
              <!-- STEP 4: Generate INTEGRATION TEST coverage report -->
              <!-- Runs after integration tests (post-integration-test phase) to create XML report -->
              <!-- Input: target/jacoco-it.exec -->
              <!-- Output: target/site/jacoco-it/jacoco.xml -->
              <execution>
                <id>report-integration</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>report-integration</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                  <formats>
                    <format>XML</format>
                  </formats>
                </configuration>
              </execution>
              
            </executions>
            <configuration>
              <!-- Exclude system classes from coverage analysis -->
              <excludes>
                <exclude>com/sun/**</exclude>
                <exclude>java/**</exclude>
                <exclude>javax/**</exclude>
                <exclude>sun/**</exclude>
                <exclude>jdk/**</exclude>
                <exclude>org/eclipse/**</exclude>
                <exclude>net/bytebuddy/**</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>